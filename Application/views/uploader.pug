block content
    link(rel='stylesheet', href='stylesheets/bootstrap.min.css')

    .container
      h3 Executable Example
      p
        | After clicked the "
        b Select
        | " button on the container list in last step, you are able to operate with the blobs under the selected container.
      // <p><b><label>Selected container name: </label></b> <input type="text" id="container" disabled=true/></p>
      ul
        li
          p
            | Click 
            button.btn.btn-xs.btn-primary(onclick='listResizedImages()') ListBlobs
            |  button to view the blobs under your selected container
        li
          p
            | Click 
            button#upload-button.btn.btn-xs.btn-primary(onclick='uploadBlobByStream(false)') UploadBlob
            |  button to upload a local file to current container after selecting a file:
          p
            input#files(type='file', name='file', onclick='displayProcess(0)')
        li
          p
            | Click "
            b Delete
            | " button to delete the blob
        li
          p
            | Click "
            b Download
            | " link to download a blob to local
      hr
      div
        | Uploaded Bytes: 
        font#read  
      .progress
        #progress.progress-bar(role='progressbar', aria-valuenow='60', aria-valuemin='0', aria-valuemax='100', style='width: 0%;')
          | 0%
      #result

      div 
        #thumbs

    script(src='azure-storage.blob.min.js')
    script.
        var account = 'rifieldemosv2north'; // document.getElementById('account').value;
            var sas = '?sv=2018-03-28&ss=bfqt&srt=sco&sp=rwdlacup&se=2020-02-09T08:08:40Z&st=2019-01-28T00:08:40Z&spr=https,http&sig=c6hcisXzUv6qJFdU78CgLenlHyQzVgzqHX%2BsQKC%2FoMU%3D' //document.getElementById('sas').value;
            var container = 'nodejscontainer';
            var containerResized = "nodejscont-resized";
            var blobUri = '';

            function listResizedImages() {
                var blobService = getBlobService();
                blobService.listBlobsSegmented(containerResized, null, function (error, results) {
                    if(error) {
                        alert(error);
                        return;
                    }

                    var thumbs = [];
                    for (var i = 0, blob; blob = results.entries[i]; i++) {
                        var fullPath = 'https://' + account + '.blob.core.windows.net/' + containerResized + '/' + blob.name;
                        thumbs.push('<img width="100" src="' + fullPath + '" />"');
                    }
                    document.getElementById('thumbs').innerHTML = thumbs.join('');
                });

            }

            function checkParameters() {
                // account = document.getElementById('account').value;
                // sas = document.getElementById('sas').value;

                if (account == null || account.length < 1)
                {
                    alert('Please enter a valid storage account name!');
                    return false;
                }
                if (sas == null || sas.length < 1)
                {
                    alert('Please enter a valid SAS Token!');
                    return false;
                }

                return true;
            }

            function getBlobService() {
                if (!checkParameters())
                    return null;

                blobUri = 'https://' + account + '.blob.core.windows.net';
                //AzureStorage.Blob.create
                var blobService = AzureStorage.Blob.createBlobServiceWithSas(blobUri, sas).withFilter(new AzureStorage.Blob.ExponentialRetryPolicyFilter());
                return blobService;
            }

            function refreshContainer() {
                var blobService = getBlobService();
                if (!blobService)
                    return;

                document.getElementById('containers').innerHTML = 'Loading...';
                blobService.listContainersSegmented(null, function (error, results) {
                    if (error) {
                        alert('List container error, please open browser console to view detailed error');
                        console.log(error);
                    } else {
                        var output = [];
                        output.push('<tr>',
                                        '<th>ContainerName</th>',
                                        '<th>ContainerETag</th>',
                                        '<th>LastModified</th>',
                                        '<th>Operations</th>',
                                    '</tr>');
                        if (results.entries.length < 1) {
                            output.push('<tr><td>Empty results...</td></tr>');
                        }
                        for (var i = 0, container; container = results.entries[i]; i++) {
                            output.push('<tr>',
                                            '<td>', container.name, '</td>',
                                            '<td>', container.etag, '</td>',
                                            '<td>', container.lastModified, '</td>',
                                            '<td>', '<button class="btn btn-xs btn-danger" onclick="deleteContainer(\'', container.name ,'\')">Delete</button> ',
                                                    '<button class="btn btn-xs btn-success" onclick="viewContainer(\'', container.name ,'\')">Select</button>', '</td>',
                                        '</tr>');
                        }
                        document.getElementById('containers').innerHTML = '<table class="table table-condensed table-bordered">' + output.join('') + '</table>';
                    }
                });
            }

            function deleteContainer(name) {
                var blobService = getBlobService();
                if (!blobService)
                    return;

                blobService.deleteContainerIfExists(name, function(error, result) {
                    if (error) {
                        alert('Delete container failed, open browser console for more detailed info.');
                        console.log(error);
                    } else {
                        alert('Delete ' + name + ' successfully!');
                        refreshContainer();
                    }
                });
            }

            function createContainer() {
                var blobService = getBlobService();
                if (!blobService)
                    return;

                var container = document.getElementById('newcontainer').value;
                if (!AzureStorage.Blob.Validate.containerNameIsValid(container, function(err, res){})) {
                    alert('Invalid container name!');
                    return;
                }

                blobService.createContainerIfNotExists(container, function(error, result){
                    if (error) {
                        alert('Create container failed, open browser console for more detailed info.');
                        console.log(error);
                    } else {
                        alert('Create ' + container + ' successfully!');
                        refreshContainer();
                    }
                });
            }

            function viewContainer(selectedContainer) {
                container = selectedContainer;
                document.getElementById('container').value = container;
                alert('Selected ' + container + ' !');
                refreshBlobList();
            }

            function refreshBlobList() {
                var blobService = getBlobService();
                if (!blobService)
                    return;

                document.getElementById('result').innerHTML = 'Loading...';
                blobService.createContainerIfNotExists(container, function(error, result) {
                    if (error) {
                        alert('createContainerIfNotExists error, please open browser console to view detailed error');
                        console.log(error);
                    } else {
                        blobService.listBlobsSegmented(container, null, function (error, results) {
                            if (error) {
                                alert('List blob error, please open browser console to view detailed error');
                                console.log(error);
                            } else {
                                var output = [];
                                output.push('<tr>',
                                                '<th>BlobName</th>',
                                                '<th>ContentLength</th>',
                                                '<th>LastModified</th>',
                                                '<th>Operations</th>',
                                            '</tr>');
                                if (results.entries.length < 1) {
                                    output.push('<tr><td>Empty results...</td></tr>');
                                }
                                for (var i = 0, blob; blob = results.entries[i]; i++) {
                                    output.push('<tr>',
                                                    '<td>', blob.name, '</td>',
                                                    '<td>', blob.contentLength, '</td>',
                                                    '<td>', blob.lastModified, '</td>',
                                                    '<td>', '<button class="btn btn-xs btn-danger" onclick="deleteBlob(\'', blob.name ,'\')">Delete</button> ',
                                                            '<a class="btn btn-xs btn-success" href="', blobUri + '/' + container + '/' + blob.name + sas, '" download>Download</a>' , '</td>',
                                                    '</td>',
                                                '</tr>');
                                }
                                document.getElementById('result').innerHTML = '<table class="table table-condensed table-bordered">' + output.join('') + '</table>';
                            }
                        });
                    }
                })
            }

            function deleteBlob(blob) {
                var blobService = getBlobService();
                if (!blobService)
                    return;

                blobService.deleteBlobIfExists(container, blob, function(error, result) {
                    if (error) {
                        alert('Delete blob failed, open browser console for more detailed info.');
                        console.log(error);
                    } else {
                        alert('Delete ' + blob + ' successfully!');
                        refreshBlobList();
                    }
                });
            }

            function displayProcess(process) {
                document.getElementById('progress').style.width = process + '%';
                document.getElementById('progress').innerHTML = process + '%';
            }

            function uploadBlobByStream(checkMD5) {
                debugger;
                var files = document.getElementById('files').files;
                if (!files.length) {
                    alert('Please select a file!');
                    return;
                }
                var file = files[0];

                var blobService = getBlobService();
                if (!blobService)
                    return;

                var btn = document.getElementById('upload-button');
                btn.disabled = true;
                btn.innerHTML = 'Uploading';

                // Make a smaller block size when uploading small blobs
                var blockSize = file.size > 1024 * 1024 * 32 ? 1024 * 1024 * 4 : 1024 * 512;
                var options = {
                    storeBlobContentMD5 : checkMD5,
                    blockSize : blockSize
                };
                blobService.singleBlobPutThresholdInBytes = blockSize;

                var finishedOrError = false;
                var speedSummary = blobService.createBlockBlobFromBrowserFile(container, file.name, file, options, function(error, result, response) {
                    finishedOrError = true;
                    btn.disabled = false;
                    btn.innerHTML = 'UploadBlob';
                    if (error) {
                        alert('Upload failed, open browser console for more detailed info.');
                        console.log(error);
                        displayProcess(0);
                    } else {
                        displayProcess(100);
                        setTimeout(function() { // Prevent alert from stopping UI progress update
        
                        }, 1000);
                        refreshBlobList();
                    }
                });

                speedSummary.on('progress', function () {
                    var process = speedSummary.getCompletePercent();
                    displayProcess(process);
                });
            }
